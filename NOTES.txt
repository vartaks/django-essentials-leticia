## Create python virtual environment (venv)
C:\Users\varta>py -m venv sourabh-py-venv 

## Activate the virtual environment (venv)
C:\Users\varta>.\sourabh-py-venv\Scripts\activate.bat 

## Install Django web framework
(sourabh-py-venv) C:\Users\varta>py -m pip install Django
Collecting Django
  Downloading Django-4.2.5-py3-none-any.whl (8.0 MB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 8.0/8.0 MB 10.0 MB/s eta 0:00:00
Collecting asgiref<4,>=3.6.0 (from Django)
  Using cached asgiref-3.7.2-py3-none-any.whl (24 kB)
Collecting sqlparse>=0.3.1 (from Django)
  Using cached sqlparse-0.4.4-py3-none-any.whl (41 kB)
Collecting tzdata (from Django)
  Using cached tzdata-2023.3-py2.py3-none-any.whl (341 kB)
Installing collected packages: tzdata, sqlparse, asgiref, Django
Successfully installed Django-4.2.5 asgiref-3.7.2 sqlparse-0.4.4 tzdata-2023.3

[notice] A new release of pip is available: 23.1.2 -> 23.2.1
[notice] To update, run: python.exe -m pip install --upgrade pip

## Optionally, upgrade pip package manager to latest version
(sourabh-py-venv) C:\Users\varta>python.exe -m pip install --upgrade pip
Requirement already satisfied: pip in c:\users\varta\sourabh-py-venv\lib\site-packages (23.1.2)
Collecting pip
  Using cached pip-23.2.1-py3-none-any.whl (2.1 MB)
Installing collected packages: pip
  Attempting uninstall: pip
    Found existing installation: pip 23.1.2
    Uninstalling pip-23.1.2:
      Successfully uninstalled pip-23.1.2
Successfully installed pip-23.2.1

## Check the installed Django framework version
(sourabh-py-venv) C:\Users\varta>django-admin --version                       
4.2.5

## Change to project directory
(sourabh-py-venv) C:\Users\varta>cd repos\django-essentials-leticia

## Create the new django project
(sourabh-py-venv) C:\Users\varta\repos\django-essentials-leticia>django-admin startproject smartnotes .

## Run the development local web server
(sourabh-py-venv) C:\Users\varta\repos\django-essentials-leticia>python manage.py runserver
Watching for file changes with StatReloader
Performing system checks...

System check identified no issues (0 silenced).

You have 18 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.
Run 'python manage.py migrate' to apply them.
September 04, 2023 - 15:45:15
Django version 4.2.5, using settings 'smartnotes.settings'
Starting development server at http://127.0.0.1:8000/
Quit the server with CTRL-BREAK.

[04/Sep/2023 15:46:36] "GET / HTTP/1.1" 200 10664
Not Found: /favicon.ico
[04/Sep/2023 15:46:36] "GET /favicon.ico HTTP/1.1" 404 2114

## Create home app in smartnotes project
(sourabh-py-venv) C:\Users\varta\repos\django-essentials-leticia>django-admin startapp home

## The MVT framework (Model - View - Template)
BROWSER GET /home --> urls.py --> views.py --> def home

## Django Template Language (DTL)
Templates written in DTL --> DTL Interpreter --> HTML sent to the browser

## Apply the initial database migrations for the admin and auth apps
(sourabh-py-venv) C:\Users\varta\repos\django-essentials-leticia>python manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, sessions
Running migrations:
  Applying contenttypes.0001_initial... OK
  Applying auth.0001_initial... OK
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying contenttypes.0002_remove_content_type_name... OK
  Applying auth.0002_alter_permission_name_max_length... OK
  Applying auth.0003_alter_user_email_max_length... OK
  Applying auth.0004_alter_user_username_opts... OK
  Applying auth.0005_alter_user_last_login_null... OK
  Applying auth.0006_require_contenttypes_0002... OK
  Applying auth.0007_alter_validators_add_error_messages... OK
  Applying auth.0008_alter_user_username_max_length... OK
  Applying auth.0009_alter_user_last_name_max_length... OK
  Applying auth.0010_alter_group_name_max_length... OK
  Applying auth.0011_update_proxy_permissions... OK
  Applying auth.0012_alter_user_first_name_max_length... OK
  Applying sessions.0001_initial... OK

## Create super-user
(sourabh-py-venv) C:\Users\varta\repos\django-essentials-leticia>python manage.py createsuperuser
Username (leave blank to use 'varta'): sourabh
Email address:
Password:
Password (again):
This password is too short. It must contain at least 8 characters.
Bypass password validation and create user anyway? [y/N]: y
Superuser created successfully.

$$ p --> vartak

## Django Object Relational Mapper (ORM)
Classes --> MakeMigrations --> Migrate --> Database

## Create notes app in smartnotes project
(sourabh-py-venv) C:\Users\varta\repos\django-essentials-leticia>django-admin startapp notes

## Make migrations
(sourabh-py-venv) C:\Users\varta\repos\django-essentials-leticia>python manage.py makemigrations  
Migrations for 'notes':
  notes\migrations\0001_initial.py
    - Create model Notes

## Apply migrations
(sourabh-py-venv) C:\Users\varta\repos\django-essentials-leticia>python manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, notes, sessions
Running migrations:
  Applying notes.0001_initial... OK

## Django Interactive Shell
(sourabh-py-venv) C:\Users\varta\repos\django-essentials-leticia>python manage.py shell
Python 3.11.4 (tags/v3.11.4:d2340ef, Jun  7 2023, 05:45:37) [MSC v.1934 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> from notes.models import Notes
>>> mynote = Notes.objects.get(pk='1')
>>> mynote
<Notes: Notes object (1)>
>>> print(mynote)
Notes object (1)
>>> mynote.title
'My first note'
>>> mynote.text
'Django is so cool!'
>>> Notes.objects.all()
<QuerySet [<Notes: Notes object (1)>]>
>>> note2 = Notes.object.create(title="second note", text="my second note!!")
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: type object 'Notes' has no attribute 'object'
>>> note2 = Notes.objects.create(title="second note", text="my second note!!") 
>>> Notes.objects.all()                                                        
<QuerySet [<Notes: Notes object (1)>, <Notes: Notes object (2)>]>
>>> Notes.objects.filter(title__startswith="My")
<QuerySet [<Notes: Notes object (1)>]>
>>> Notes.objects.filter(text__icontains="cool") 
<QuerySet [<Notes: Notes object (1)>]>
>>> Notes.objects.filter(title__icontains="cool") 
<QuerySet []>
>>> Notes.objects.exclude(text__icontains="cool") 
<QuerySet [<Notes: Notes object (2)>]>
>>> Notes.objects.filter(text__icontains="cool").exclude(title__icontains="cool")
<QuerySet [<Notes: Notes object (1)>]>
>>> Notes.objects.filter(text__icontains="cool").exclude(title__icontai="cool")   
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "C:\Users\varta\sourabh-py-venv\Lib\site-packages\django\db\models\query.py", line 1444, in exclude
    return self._filter_or_exclude(True, args, kwargs)

## CSRF Token
We add CSRF token to the POST form to prevent cross-site request forgery (CSRF) attack

Step 1: Django --> CSRF token --> Browser
Step 2: Browser --> Form + CSRF token --> Django

## Make migrations for foreign key constraint for notes table to user table
(sourabh-py-venv) C:\Users\varta\repos\django-essentials-leticia>python manage.py makemigrations
It is impossible to add a non-nullable field 'user' to notes without specifying a default. This is because the database needs something to populate existing rows.
Please select a fix:
 1) Provide a one-off default now (will be set on all existing rows with a null value for this column)
 2) Quit and manually define a default value in models.py.
Select an option: 1
Please enter the default value as valid Python.
The datetime and django.utils.timezone modules are available, so it is possible to provide e.g. timezone.now as a value.
Type 'exit' to exit this prompt
>>> 1
Migrations for 'notes':
  notes\migrations\0002_notes_user.py
    - Add field user to notes

## Apply migrations
(sourabh-py-venv) C:\Users\varta\repos\django-essentials-leticia>python manage.py migrate       
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, notes, sessions
Running migrations:
  Applying notes.0002_notes_user... OK

